local get_visual = function(args, parent)
	if (#parent.snippet.env.LS_SELECT_RAW > 0) then
		return sn(nil, i(1, parent.snippet.env.LS_SELECT_RAW))
	else
		return sn(nil, i(1))
	end
end
local line_begin = require("luasnip.extras.expand_conditions").line_begin
local tex = {}
tex.in_mathzone = function() return vim.fn['vimtex#syntax#in_mathzone']() == 1 end
tex.in_text = function() return not tex.in_mathzone() end

return {
	s({trig="ff", dscr="Expands 'fr' into '\frac{}{}'"},
		fmt(
			"\\frac{<>}{<>}",
			{
				i(1),
				i(2),

			},
			{delimiters = "<>"}
		),
		{ condition = tex.in_mathzone }
	),

	s({trig="beq", dscr="Expands 'eq' into an equation environment", snippetType="autosnippet"},
		fmta(
			[[
				\begin{equation*}
					<>
				\end{equation*}
			]],
			{ i(1) }
		)
	),

	s({trig="env", snippetType="autosnippet"},
		fmta(
			[[
				\begin{<>}
					<>
				\end{<>}
			]],
			{
				i(1),
				i(2),
				rep(1),
			}
		)
	),

	s({trig = "tii", dscr = "Expands 'tii' into LaTeX's textit{} command."},
		fmt(
			"\\textit{<>}",
			{
				i(1),
			},
			{ delimiters = "<>" }
		)
	),

	s({trig = "par", dscr = "Expands 'par' into parenthesis with autosize."},
		fmt(
			"\\left(<>\\right)",
			{
				i(1),
			},
			{ delimiters = "<>" }
		),
		{ condition = tex.in_mathzone }
	),

	s({trig = "iint", dscr = "Expands 'iint' into a infinite integral.", snippetType="autosnippet"},
		fmt(
			"\\int_{-\\infty}^{\\infty} <> \\, d",
			{
				i(1),
			},
			{ delimiters = "<>" }
		),
		{ condition = tex.in_mathzone }
	),

	s({trig = "dint", dscr = "Expands 'dint' into a definite integral.", snippetType="autosnippet"},
		fmt(
			"\\int_{<>}^{<>} <> \\, d",
			{
				i(1),
				i(2),
				i(3),
			},
			{ delimiters = "<>" }
		),
		{ condition = tex.in_mathzone }
	),
}
